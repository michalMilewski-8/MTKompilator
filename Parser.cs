// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-8DA6HAV
// DateTime: 13.06.2020 21:36:08
// UserName: miles
// Input file <..\..\kompilator.y - 13.06.2020 19:57:46>

// options: conflicts no-lines diagnose & report gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace GardensPoint
{
public enum Tokens {error=2,EOF=3,Program=4,Int=5,Double=6,
    Bool=7,OpenBlock=8,CloseBlock=9,Assign=10,Plus=11,Minus=12,
    Multiplies=13,Divides=14,OpenPar=15,ClosePar=16,EndLine=17,Eof=18,
    Error=19,Write=20,If=21,Else=22,While=23,Read=24,
    Return=25,LogicOr=26,LogicAnd=27,Or=28,And=29,Equal=30,
    NotEqual=31,Greater=32,GreaterEqual=33,Smaller=34,SmallerEqual=35,LogicNot=36,
    Not=37,Coma=38,Break=39,Continue=40,OpenIndex=41,CloseIndex=42,
    Create=43,Ident=44,IntNumber=45,RealNumber=46,Boolean=47,String=48};

public struct ValueType
{
public string  val;
public int  integ;
public Parser.Types type;
public Compiler.Node node;
public Dictionary<string,Compiler.DecType> idents;
public List<Compiler.Node> index;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[92];
  private static State[] states = new State[164];
  private static string[] nonTerms = new string[] {
      "dectype", "indexes", "line", "expr", "expr2", "expr3", "expr4", "expr5", 
      "expr6", "expr1", "val", "block", "code", "unary", "bit", "mult", "add", 
      "rel", "logic", "declarations", "declaration", "longdeclaration", "dimmensions", 
      "start", "$accept", "body", "Anon@1", "end", "Anon@2", };

  static Parser() {
    states[0] = new State(new int[]{4,3,8,159,18,163},new int[]{-24,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{8,4,2,157});
    states[4] = new State(new int[]{5,152,6,153,7,154,2,128,8,12,44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70,24,87,20,90,21,95,23,102,25,107,40,109,39,111,43,115,17,122,18,126,9,-9},new int[]{-26,5,-20,8,-21,131,-1,133,-13,156,-12,10,-3,19,-4,20,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[5] = new State(new int[]{9,6});
    states[6] = new State(new int[]{18,7});
    states[7] = new State(-2);
    states[8] = new State(new int[]{8,12,44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70,24,87,20,90,21,95,23,102,25,107,40,109,39,111,43,115,17,122,2,123,18,126,9,-7},new int[]{-13,9,-12,10,-3,19,-4,20,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[9] = new State(-6);
    states[10] = new State(new int[]{8,12,44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70,24,87,20,90,21,95,23,102,25,107,40,109,39,111,43,115,17,122,2,123,18,126,9,-26},new int[]{-13,11,-12,10,-3,19,-4,20,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[11] = new State(-25);
    states[12] = new State(new int[]{9,127,8,12,44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70,24,87,20,90,21,95,23,102,25,107,40,109,39,111,43,115,17,122,2,128,18,126,5,152,6,153,7,154},new int[]{-13,13,-20,15,-12,10,-3,19,-4,20,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67,-21,131,-1,133});
    states[13] = new State(new int[]{9,14});
    states[14] = new State(-27);
    states[15] = new State(new int[]{9,18,8,12,44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70,24,87,20,90,21,95,23,102,25,107,40,109,39,111,43,115,17,122,2,123,18,126},new int[]{-13,16,-12,10,-3,19,-4,20,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[16] = new State(new int[]{9,17});
    states[17] = new State(-28);
    states[18] = new State(-29);
    states[19] = new State(-30);
    states[20] = new State(new int[]{17,22,18,23},new int[]{-28,21});
    states[21] = new State(-32);
    states[22] = new State(-90);
    states[23] = new State(-91);
    states[24] = new State(new int[]{10,25,41,81,28,-82,29,-82,13,-82,14,-82,11,-82,12,-82,30,-82,31,-82,32,-82,33,-82,34,-82,35,-82,27,-82,26,-82,17,-82,18,-82,16,-82,38,-82,42,-82});
    states[25] = new State(new int[]{44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70},new int[]{-4,26,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[26] = new State(-48);
    states[27] = new State(new int[]{27,79,26,80,17,-50,18,-50,16,-50,38,-50,42,-50},new int[]{-19,28});
    states[28] = new State(new int[]{36,40,37,41,12,42,15,43,44,71,45,68,46,69,47,70},new int[]{-5,29,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[29] = new State(new int[]{30,51,31,52,32,53,33,54,34,55,35,56,27,-51,26,-51,17,-51,18,-51,16,-51,38,-51,42,-51},new int[]{-18,30});
    states[30] = new State(new int[]{36,40,37,41,12,42,15,43,44,71,45,68,46,69,47,70},new int[]{-6,31,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[31] = new State(new int[]{11,58,12,59,30,-53,31,-53,32,-53,33,-53,34,-53,35,-53,27,-53,26,-53,17,-53,18,-53,16,-53,38,-53,42,-53},new int[]{-17,32});
    states[32] = new State(new int[]{36,40,37,41,12,42,15,43,44,71,45,68,46,69,47,70},new int[]{-7,33,-8,63,-9,66,-14,38,-11,67});
    states[33] = new State(new int[]{13,61,14,62,11,-55,12,-55,30,-55,31,-55,32,-55,33,-55,34,-55,35,-55,27,-55,26,-55,17,-55,18,-55,16,-55,38,-55,42,-55},new int[]{-16,34});
    states[34] = new State(new int[]{36,40,37,41,12,42,15,43,44,71,45,68,46,69,47,70},new int[]{-8,35,-9,66,-14,38,-11,67});
    states[35] = new State(new int[]{28,64,29,65,13,-57,14,-57,11,-57,12,-57,30,-57,31,-57,32,-57,33,-57,34,-57,35,-57,27,-57,26,-57,17,-57,18,-57,16,-57,38,-57,42,-57},new int[]{-15,36});
    states[36] = new State(new int[]{36,40,37,41,12,42,15,43,44,71,45,68,46,69,47,70},new int[]{-9,37,-14,38,-11,67});
    states[37] = new State(-59);
    states[38] = new State(new int[]{36,40,37,41,12,42,15,43,44,71,45,68,46,69,47,70},new int[]{-9,39,-14,38,-11,67});
    states[39] = new State(-61);
    states[40] = new State(-77);
    states[41] = new State(-78);
    states[42] = new State(-79);
    states[43] = new State(new int[]{5,44,6,46,44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70},new int[]{-4,48,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[44] = new State(new int[]{16,45});
    states[45] = new State(-80);
    states[46] = new State(new int[]{16,47});
    states[47] = new State(-81);
    states[48] = new State(new int[]{16,49});
    states[49] = new State(-87);
    states[50] = new State(new int[]{30,51,31,52,32,53,33,54,34,55,35,56,27,-52,26,-52,17,-52,18,-52,16,-52,38,-52,42,-52},new int[]{-18,30});
    states[51] = new State(-65);
    states[52] = new State(-66);
    states[53] = new State(-67);
    states[54] = new State(-68);
    states[55] = new State(-69);
    states[56] = new State(-70);
    states[57] = new State(new int[]{11,58,12,59,30,-54,31,-54,32,-54,33,-54,34,-54,35,-54,27,-54,26,-54,17,-54,18,-54,16,-54,38,-54,42,-54},new int[]{-17,32});
    states[58] = new State(-71);
    states[59] = new State(-72);
    states[60] = new State(new int[]{13,61,14,62,11,-56,12,-56,30,-56,31,-56,32,-56,33,-56,34,-56,35,-56,27,-56,26,-56,17,-56,18,-56,16,-56,38,-56,42,-56},new int[]{-16,34});
    states[61] = new State(-73);
    states[62] = new State(-74);
    states[63] = new State(new int[]{28,64,29,65,13,-58,14,-58,11,-58,12,-58,30,-58,31,-58,32,-58,33,-58,34,-58,35,-58,27,-58,26,-58,17,-58,18,-58,16,-58,38,-58,42,-58},new int[]{-15,36});
    states[64] = new State(-75);
    states[65] = new State(-76);
    states[66] = new State(-60);
    states[67] = new State(-62);
    states[68] = new State(-83);
    states[69] = new State(-84);
    states[70] = new State(-85);
    states[71] = new State(new int[]{41,72,28,-82,29,-82,13,-82,14,-82,11,-82,12,-82,30,-82,31,-82,32,-82,33,-82,34,-82,35,-82,27,-82,26,-82,17,-82,18,-82,16,-82,38,-82,42,-82});
    states[72] = new State(new int[]{44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70},new int[]{-4,73,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[73] = new State(new int[]{38,76,42,-89},new int[]{-2,74});
    states[74] = new State(new int[]{42,75});
    states[75] = new State(-86);
    states[76] = new State(new int[]{44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70},new int[]{-4,77,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[77] = new State(new int[]{38,76,42,-89},new int[]{-2,78});
    states[78] = new State(-88);
    states[79] = new State(-63);
    states[80] = new State(-64);
    states[81] = new State(new int[]{44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70},new int[]{-4,82,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[82] = new State(new int[]{38,76,42,-89},new int[]{-2,83});
    states[83] = new State(new int[]{42,84});
    states[84] = new State(new int[]{10,85,28,-86,29,-86,13,-86,14,-86,11,-86,12,-86,30,-86,31,-86,32,-86,33,-86,34,-86,35,-86,27,-86,26,-86,17,-86,18,-86,16,-86,38,-86,42,-86});
    states[85] = new State(new int[]{44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70},new int[]{-4,86,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[86] = new State(-49);
    states[87] = new State(new int[]{44,88});
    states[88] = new State(new int[]{17,22,18,23},new int[]{-28,89});
    states[89] = new State(-33);
    states[90] = new State(new int[]{48,93,44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70},new int[]{-4,91,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[91] = new State(new int[]{17,22,18,23},new int[]{-28,92});
    states[92] = new State(-34);
    states[93] = new State(new int[]{17,22,18,23},new int[]{-28,94});
    states[94] = new State(-35);
    states[95] = new State(new int[]{15,96});
    states[96] = new State(new int[]{44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70},new int[]{-4,97,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[97] = new State(new int[]{16,98});
    states[98] = new State(new int[]{8,12,44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70,24,87,20,90,21,95,23,102,25,107,40,109,39,111,43,115,17,122,2,123,18,126},new int[]{-12,99,-3,19,-4,20,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[99] = new State(new int[]{22,100,8,-36,44,-36,36,-36,37,-36,12,-36,15,-36,45,-36,46,-36,47,-36,24,-36,20,-36,21,-36,23,-36,25,-36,40,-36,39,-36,43,-36,17,-36,2,-36,18,-36,9,-36});
    states[100] = new State(new int[]{8,12,44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70,24,87,20,90,21,95,23,102,25,107,40,109,39,111,43,115,17,122,2,123,18,126},new int[]{-12,101,-3,19,-4,20,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[101] = new State(-37);
    states[102] = new State(new int[]{15,103});
    states[103] = new State(new int[]{44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70},new int[]{-4,104,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[104] = new State(new int[]{16,105});
    states[105] = new State(new int[]{8,12,44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70,24,87,20,90,21,95,23,102,25,107,40,109,39,111,43,115,17,122,2,123,18,126},new int[]{-12,106,-3,19,-4,20,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[106] = new State(-38);
    states[107] = new State(new int[]{17,22,18,23},new int[]{-28,108});
    states[108] = new State(-39);
    states[109] = new State(new int[]{17,22,18,23},new int[]{-28,110});
    states[110] = new State(-40);
    states[111] = new State(new int[]{45,113,17,22,18,23},new int[]{-28,112});
    states[112] = new State(-41);
    states[113] = new State(new int[]{17,22,18,23},new int[]{-28,114});
    states[114] = new State(-42);
    states[115] = new State(new int[]{44,116});
    states[116] = new State(new int[]{41,117});
    states[117] = new State(new int[]{44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70},new int[]{-4,118,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[118] = new State(new int[]{38,76,42,-89},new int[]{-2,119});
    states[119] = new State(new int[]{42,120});
    states[120] = new State(new int[]{17,22,18,23},new int[]{-28,121});
    states[121] = new State(-43);
    states[122] = new State(-44);
    states[123] = new State(new int[]{17,124,18,125});
    states[124] = new State(-45);
    states[125] = new State(-46);
    states[126] = new State(-47);
    states[127] = new State(-31);
    states[128] = new State(new int[]{17,124,18,125,44,129});
    states[129] = new State(new int[]{17,22,18,23},new int[]{-28,130});
    states[130] = new State(-16);
    states[131] = new State(new int[]{5,152,6,153,7,154,2,155,8,-11,44,-11,36,-11,37,-11,12,-11,15,-11,45,-11,46,-11,47,-11,24,-11,20,-11,21,-11,23,-11,25,-11,40,-11,39,-11,43,-11,17,-11,18,-11,9,-11},new int[]{-20,132,-21,131,-1,133});
    states[132] = new State(-10);
    states[133] = new State(new int[]{41,141,2,150,44,-12},new int[]{-27,134});
    states[134] = new State(new int[]{44,135});
    states[135] = new State(new int[]{38,138,17,-21,18,-21},new int[]{-22,136});
    states[136] = new State(new int[]{17,22,18,23},new int[]{-28,137});
    states[137] = new State(-13);
    states[138] = new State(new int[]{44,139});
    states[139] = new State(new int[]{38,138,17,-21,18,-21},new int[]{-22,140});
    states[140] = new State(-20);
    states[141] = new State(new int[]{38,148,42,-19},new int[]{-23,142});
    states[142] = new State(new int[]{42,143});
    states[143] = new State(-14,new int[]{-29,144});
    states[144] = new State(new int[]{44,145});
    states[145] = new State(new int[]{38,138,17,-21,18,-21},new int[]{-22,146});
    states[146] = new State(new int[]{17,22,18,23},new int[]{-28,147});
    states[147] = new State(-15);
    states[148] = new State(new int[]{38,148,42,-19},new int[]{-23,149});
    states[149] = new State(-18);
    states[150] = new State(new int[]{17,22,18,23},new int[]{-28,151});
    states[151] = new State(-17);
    states[152] = new State(-22);
    states[153] = new State(-23);
    states[154] = new State(-24);
    states[155] = new State(new int[]{44,129});
    states[156] = new State(-8);
    states[157] = new State(new int[]{18,158});
    states[158] = new State(-3);
    states[159] = new State(new int[]{5,152,6,153,7,154,2,128,8,12,44,24,36,40,37,41,12,42,15,43,45,68,46,69,47,70,24,87,20,90,21,95,23,102,25,107,40,109,39,111,43,115,17,122,18,126,9,-9},new int[]{-26,160,-20,8,-21,131,-1,133,-13,156,-12,10,-3,19,-4,20,-10,27,-5,50,-6,57,-7,60,-8,63,-9,66,-14,38,-11,67});
    states[160] = new State(new int[]{9,161});
    states[161] = new State(new int[]{18,162});
    states[162] = new State(-4);
    states[163] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-25, new int[]{-24,3});
    rules[2] = new Rule(-24, new int[]{4,8,-26,9,18});
    rules[3] = new Rule(-24, new int[]{4,2,18});
    rules[4] = new Rule(-24, new int[]{8,-26,9,18});
    rules[5] = new Rule(-24, new int[]{18});
    rules[6] = new Rule(-26, new int[]{-20,-13});
    rules[7] = new Rule(-26, new int[]{-20});
    rules[8] = new Rule(-26, new int[]{-13});
    rules[9] = new Rule(-26, new int[]{});
    rules[10] = new Rule(-20, new int[]{-21,-20});
    rules[11] = new Rule(-20, new int[]{-21});
    rules[12] = new Rule(-27, new int[]{});
    rules[13] = new Rule(-21, new int[]{-1,-27,44,-22,-28});
    rules[14] = new Rule(-29, new int[]{});
    rules[15] = new Rule(-21, new int[]{-1,41,-23,42,-29,44,-22,-28});
    rules[16] = new Rule(-21, new int[]{2,44,-28});
    rules[17] = new Rule(-21, new int[]{-1,2,-28});
    rules[18] = new Rule(-23, new int[]{38,-23});
    rules[19] = new Rule(-23, new int[]{});
    rules[20] = new Rule(-22, new int[]{38,44,-22});
    rules[21] = new Rule(-22, new int[]{});
    rules[22] = new Rule(-1, new int[]{5});
    rules[23] = new Rule(-1, new int[]{6});
    rules[24] = new Rule(-1, new int[]{7});
    rules[25] = new Rule(-13, new int[]{-12,-13});
    rules[26] = new Rule(-13, new int[]{-12});
    rules[27] = new Rule(-12, new int[]{8,-13,9});
    rules[28] = new Rule(-12, new int[]{8,-20,-13,9});
    rules[29] = new Rule(-12, new int[]{8,-20,9});
    rules[30] = new Rule(-12, new int[]{-3});
    rules[31] = new Rule(-12, new int[]{8,9});
    rules[32] = new Rule(-3, new int[]{-4,-28});
    rules[33] = new Rule(-3, new int[]{24,44,-28});
    rules[34] = new Rule(-3, new int[]{20,-4,-28});
    rules[35] = new Rule(-3, new int[]{20,48,-28});
    rules[36] = new Rule(-3, new int[]{21,15,-4,16,-12});
    rules[37] = new Rule(-3, new int[]{21,15,-4,16,-12,22,-12});
    rules[38] = new Rule(-3, new int[]{23,15,-4,16,-12});
    rules[39] = new Rule(-3, new int[]{25,-28});
    rules[40] = new Rule(-3, new int[]{40,-28});
    rules[41] = new Rule(-3, new int[]{39,-28});
    rules[42] = new Rule(-3, new int[]{39,45,-28});
    rules[43] = new Rule(-3, new int[]{43,44,41,-4,-2,42,-28});
    rules[44] = new Rule(-3, new int[]{17});
    rules[45] = new Rule(-3, new int[]{2,17});
    rules[46] = new Rule(-3, new int[]{2,18});
    rules[47] = new Rule(-3, new int[]{18});
    rules[48] = new Rule(-4, new int[]{44,10,-4});
    rules[49] = new Rule(-4, new int[]{44,41,-4,-2,42,10,-4});
    rules[50] = new Rule(-4, new int[]{-10});
    rules[51] = new Rule(-10, new int[]{-10,-19,-5});
    rules[52] = new Rule(-10, new int[]{-5});
    rules[53] = new Rule(-5, new int[]{-5,-18,-6});
    rules[54] = new Rule(-5, new int[]{-6});
    rules[55] = new Rule(-6, new int[]{-6,-17,-7});
    rules[56] = new Rule(-6, new int[]{-7});
    rules[57] = new Rule(-7, new int[]{-7,-16,-8});
    rules[58] = new Rule(-7, new int[]{-8});
    rules[59] = new Rule(-8, new int[]{-8,-15,-9});
    rules[60] = new Rule(-8, new int[]{-9});
    rules[61] = new Rule(-9, new int[]{-14,-9});
    rules[62] = new Rule(-9, new int[]{-11});
    rules[63] = new Rule(-19, new int[]{27});
    rules[64] = new Rule(-19, new int[]{26});
    rules[65] = new Rule(-18, new int[]{30});
    rules[66] = new Rule(-18, new int[]{31});
    rules[67] = new Rule(-18, new int[]{32});
    rules[68] = new Rule(-18, new int[]{33});
    rules[69] = new Rule(-18, new int[]{34});
    rules[70] = new Rule(-18, new int[]{35});
    rules[71] = new Rule(-17, new int[]{11});
    rules[72] = new Rule(-17, new int[]{12});
    rules[73] = new Rule(-16, new int[]{13});
    rules[74] = new Rule(-16, new int[]{14});
    rules[75] = new Rule(-15, new int[]{28});
    rules[76] = new Rule(-15, new int[]{29});
    rules[77] = new Rule(-14, new int[]{36});
    rules[78] = new Rule(-14, new int[]{37});
    rules[79] = new Rule(-14, new int[]{12});
    rules[80] = new Rule(-14, new int[]{15,5,16});
    rules[81] = new Rule(-14, new int[]{15,6,16});
    rules[82] = new Rule(-11, new int[]{44});
    rules[83] = new Rule(-11, new int[]{45});
    rules[84] = new Rule(-11, new int[]{46});
    rules[85] = new Rule(-11, new int[]{47});
    rules[86] = new Rule(-11, new int[]{44,41,-4,-2,42});
    rules[87] = new Rule(-11, new int[]{15,-4,16});
    rules[88] = new Rule(-2, new int[]{38,-4,-2});
    rules[89] = new Rule(-2, new int[]{});
    rules[90] = new Rule(-28, new int[]{17});
    rules[91] = new Rule(-28, new int[]{18});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 3: // start -> Program, error, Eof
{
                    ++Compiler.errors;
                    Console.WriteLine("line {0} error: Syntax error",0);
                    YYAbort();
                    }
        break;
      case 4: // start -> OpenBlock, body, CloseBlock, Eof
{
                    ++Compiler.errors;
                    Console.WriteLine("line {0} error: Syntax error",0);
                    YYAbort();
                    }
        break;
      case 5: // start -> Eof
{
                    ++Compiler.errors;
                    Console.WriteLine("line {0} error: Syntax error",0);
                    YYAbort();
                    }
        break;
      case 6: // body -> declarations, code
{ Compiler.treeRoot = ValueStack[ValueStack.Depth-1].node; ((Compiler.CodeNode)ValueStack[ValueStack.Depth-1].node).idents = ValueStack[ValueStack.Depth-2].idents; ((Compiler.CodeNode)ValueStack[ValueStack.Depth-1].node).codeId = "super"; }
        break;
      case 7: // body -> declarations
{ Compiler.treeRoot = new Compiler.CodeNode(); ((Compiler.CodeNode)Compiler.treeRoot).idents = ValueStack[ValueStack.Depth-1].idents;}
        break;
      case 8: // body -> code
{ Compiler.treeRoot = ValueStack[ValueStack.Depth-1].node; ((Compiler.CodeNode)ValueStack[ValueStack.Depth-1].node).codeId = "super"; }
        break;
      case 10: // declarations -> declaration, declarations
{
                    CurrentSemanticValue.idents = ValueStack[ValueStack.Depth-2].idents;
                    foreach(var pair in ValueStack[ValueStack.Depth-1].idents)
                    {
                        if (CurrentSemanticValue.idents.ContainsKey(pair.Key))
                        {
                             Console.WriteLine("line: {0} error: such id already exists",Compiler.lineno);
                             ++Compiler.errors;
                        }
                        else
                            CurrentSemanticValue.idents.Add(pair.Key, pair.Value);
                    }
                }
        break;
      case 11: // declarations -> declaration
{CurrentSemanticValue.idents = ValueStack[ValueStack.Depth-1].idents;}
        break;
      case 12: // Anon@1 -> /* empty */
{
                    Compiler.currentDecType = new Compiler.DecType(ValueStack[ValueStack.Depth-1].type);
                }
        break;
      case 13: // declaration -> dectype, Anon@1, Ident, longdeclaration, end
{ 
                    if (ValueStack[ValueStack.Depth-2].idents.ContainsKey(ValueStack[ValueStack.Depth-3].val))
                    {
                     Console.WriteLine("line: {0} error: such id already exists",Compiler.lineno);
                     ++Compiler.errors;
                     CurrentSemanticValue.idents = new Dictionary<string,Compiler.DecType>();
                    }
                    else
                       ValueStack[ValueStack.Depth-2].idents.Add(ValueStack[ValueStack.Depth-3].val, Compiler.currentDecType);
                    CurrentSemanticValue.idents = ValueStack[ValueStack.Depth-2].idents;
                }
        break;
      case 14: // Anon@2 -> /* empty */
{
                    Compiler.currentDecType = new Compiler.DecType(ValueStack[ValueStack.Depth-4].type,true,ValueStack[ValueStack.Depth-2].integ);
                }
        break;
      case 15: // declaration -> dectype, OpenIndex, dimmensions, CloseIndex, Anon@2, Ident, 
               //                longdeclaration, end
{ 
                    if (ValueStack[ValueStack.Depth-2].idents.ContainsKey(ValueStack[ValueStack.Depth-3].val))
                    {
                     Console.WriteLine("line: {0} error: such id already exists",Compiler.lineno);
                     ++Compiler.errors;
                     CurrentSemanticValue.idents = new Dictionary<string,Compiler.DecType>();
                    }
                    else
                       ValueStack[ValueStack.Depth-2].idents.Add(ValueStack[ValueStack.Depth-3].val, Compiler.currentDecType);
                    CurrentSemanticValue.idents = ValueStack[ValueStack.Depth-2].idents;
                }
        break;
      case 16: // declaration -> error, Ident, end
{ 
                    Console.WriteLine("line {0,3} error: syntax error. ",Compiler.lineno);
                    ++Compiler.errors;
                    CurrentSemanticValue.idents = new Dictionary<string,Compiler.DecType>();
                }
        break;
      case 17: // declaration -> dectype, error, end
{
                    Console.WriteLine("line {0,3} error: syntax error. ",Compiler.lineno);
                    ++Compiler.errors; 
                    CurrentSemanticValue.idents = new Dictionary<string,Compiler.DecType>();
                }
        break;
      case 18: // dimmensions -> Coma, dimmensions
{ CurrentSemanticValue.integ = ValueStack[ValueStack.Depth-1].integ+1;}
        break;
      case 19: // dimmensions -> /* empty */
{CurrentSemanticValue.integ = 1;}
        break;
      case 20: // longdeclaration -> Coma, Ident, longdeclaration
{ 
                            if (ValueStack[ValueStack.Depth-1].idents.ContainsKey(ValueStack[ValueStack.Depth-2].val))
                            {
                             Console.WriteLine("line: {0} error: such id already exists",Compiler.lineno);
                             ++Compiler.errors;
                            }
                            else
                               ValueStack[ValueStack.Depth-1].idents.Add(ValueStack[ValueStack.Depth-2].val, Compiler.currentDecType);

                            CurrentSemanticValue.idents = ValueStack[ValueStack.Depth-1].idents;
                        }
        break;
      case 21: // longdeclaration -> /* empty */
{CurrentSemanticValue.idents = new Dictionary<string,Compiler.DecType>();}
        break;
      case 22: // dectype -> Int
{CurrentSemanticValue.type = Types.IntegerType;}
        break;
      case 23: // dectype -> Double
{CurrentSemanticValue.type = Types.DoubleType;}
        break;
      case 24: // dectype -> Bool
{CurrentSemanticValue.type =Types.BooleanType;}
        break;
      case 25: // code -> block, code
{ 
                Compiler.CodeNode node = new Compiler.CodeNode();
                node.inside.Add(ValueStack[ValueStack.Depth-2].node);
                Compiler.CodeNode child = ValueStack[ValueStack.Depth-1].node as Compiler.CodeNode;
                if (child is null) {
                    ++Compiler.errors;
                    Console.WriteLine("line {0} error: Syntax error",0);
                }
                else {
                    node.inside.AddRange(child.inside);
                }
                CurrentSemanticValue.node = node;
                CurrentSemanticValue.node.linenumber = Compiler.lineno;
            }
        break;
      case 26: // code -> block
{ 
                Compiler.CodeNode node = new Compiler.CodeNode();
                node.inside.Add(ValueStack[ValueStack.Depth-1].node);
                CurrentSemanticValue.node = node;
                CurrentSemanticValue.node.linenumber = Compiler.lineno;
            }
        break;
      case 27: // block -> OpenBlock, code, CloseBlock
{ CurrentSemanticValue.node = new Compiler.BlockNode(ValueStack[ValueStack.Depth-2].node); CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 28: // block -> OpenBlock, declarations, code, CloseBlock
{
            ((Compiler.CodeNode)ValueStack[ValueStack.Depth-2].node).idents = ValueStack[ValueStack.Depth-3].idents;
            CurrentSemanticValue.node = new Compiler.BlockNode(ValueStack[ValueStack.Depth-2].node);
            CurrentSemanticValue.node.linenumber = Compiler.lineno;
          }
        break;
      case 29: // block -> OpenBlock, declarations, CloseBlock
{ CurrentSemanticValue.node = new Compiler.BlockNode(new Compiler.EmptyNode()); CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 30: // block -> line
{ CurrentSemanticValue.node = new Compiler.BlockNode(ValueStack[ValueStack.Depth-1].node);CurrentSemanticValue.node.linenumber = Compiler.lineno; }
        break;
      case 31: // block -> OpenBlock, CloseBlock
{ CurrentSemanticValue.node = new Compiler.BlockNode(new Compiler.EmptyNode()); CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 32: // line -> expr, end
{ CurrentSemanticValue.node = new Compiler.BareExpresionNode(ValueStack[ValueStack.Depth-2].node);CurrentSemanticValue.node.linenumber = Compiler.lineno; }
        break;
      case 33: // line -> Read, Ident, end
{ CurrentSemanticValue.node = new Compiler.ReadNode(new Compiler.IdentNode(ValueStack[ValueStack.Depth-2].val));CurrentSemanticValue.node.linenumber = Compiler.lineno; }
        break;
      case 34: // line -> Write, expr, end
{ CurrentSemanticValue.node = new Compiler.WriteNode(ValueStack[ValueStack.Depth-2].node);CurrentSemanticValue.node.linenumber = Compiler.lineno; }
        break;
      case 35: // line -> Write, String, end
{ CurrentSemanticValue.node = new Compiler.WriteNode(new Compiler.StringNode(ValueStack[ValueStack.Depth-2].val)); CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 36: // line -> If, OpenPar, expr, ClosePar, block
{
                  CurrentSemanticValue.node = new Compiler.IfNode(ValueStack[ValueStack.Depth-3].node,ValueStack[ValueStack.Depth-1].node);
                  CurrentSemanticValue.node.linenumber = Compiler.lineno;
                }
        break;
      case 37: // line -> If, OpenPar, expr, ClosePar, block, Else, block
{
                  CurrentSemanticValue.node = new Compiler.IfElseNode(ValueStack[ValueStack.Depth-5].node,ValueStack[ValueStack.Depth-3].node,ValueStack[ValueStack.Depth-1].node);
                  CurrentSemanticValue.node.linenumber = Compiler.lineno;
                }
        break;
      case 38: // line -> While, OpenPar, expr, ClosePar, block
{
                  CurrentSemanticValue.node = new Compiler.WhileNode(ValueStack[ValueStack.Depth-3].node,ValueStack[ValueStack.Depth-1].node, Compiler.lineno);
                }
        break;
      case 39: // line -> Return, end
{
                  CurrentSemanticValue.node = new Compiler.ReturnNode();
                  CurrentSemanticValue.node.linenumber = Compiler.lineno;
                }
        break;
      case 40: // line -> Continue, end
{
                  CurrentSemanticValue.node = new Compiler.ContinueNode();
                  CurrentSemanticValue.node.linenumber = Compiler.lineno;
                }
        break;
      case 41: // line -> Break, end
{
                  CurrentSemanticValue.node = new Compiler.BreakNode(Compiler.lineno);
                }
        break;
      case 42: // line -> Break, IntNumber, end
{
                  CurrentSemanticValue.node = new Compiler.BreakNode(new Compiler.IntNumberNode(ValueStack[ValueStack.Depth-2].val),Compiler.lineno);
                }
        break;
      case 43: // line -> Create, Ident, OpenIndex, expr, indexes, CloseIndex, end
{
                    ValueStack[ValueStack.Depth-3].index.Insert(0,ValueStack[ValueStack.Depth-4].node);
                    CurrentSemanticValue.node = new Compiler.TabIdentNode(ValueStack[ValueStack.Depth-6].val,ValueStack[ValueStack.Depth-3].index,true); 
                    CurrentSemanticValue.node.linenumber = Compiler.lineno;
                }
        break;
      case 44: // line -> EndLine
{ CurrentSemanticValue.node = new Compiler.EmptyNode(); CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 45: // line -> error, EndLine
{
                  Console.WriteLine("line {0,3} error: syntax error ",Compiler.lineno);  ++Compiler.errors; ;
                }
        break;
      case 46: // line -> error, Eof
{
                  Console.WriteLine("line {0,3} error: unexpected Eof ",Compiler.lineno);  ++Compiler.errors; 
                  YYAbort(); 
                }
        break;
      case 47: // line -> Eof
{
                    ++Compiler.errors;
                    Console.WriteLine("line {0,3} error: Syntax error",0);
                    YYAbort();
                }
        break;
      case 48: // expr -> Ident, Assign, expr
{
                Compiler.IdentNode node = new Compiler.IdentNode(ValueStack[ValueStack.Depth-3].val);
                node.linenumber = Compiler.lineno;
                CurrentSemanticValue.node = new Compiler.AssignNode(node, ValueStack[ValueStack.Depth-1].node);
                CurrentSemanticValue.node.linenumber = Compiler.lineno;
            }
        break;
      case 49: // expr -> Ident, OpenIndex, expr, indexes, CloseIndex, Assign, expr
{
                ValueStack[ValueStack.Depth-4].index.Insert(0,ValueStack[ValueStack.Depth-5].node);
                Compiler.TabIdentNode node = new Compiler.TabIdentNode(ValueStack[ValueStack.Depth-7].val,ValueStack[ValueStack.Depth-4].index); 
                node.linenumber = Compiler.lineno;
                CurrentSemanticValue.node = new Compiler.AssignNode(node, ValueStack[ValueStack.Depth-1].node);
                CurrentSemanticValue.node.linenumber = Compiler.lineno;
            }
        break;
      case 50: // expr -> expr1
{CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;}
        break;
      case 51: // expr1 -> expr1, logic, expr2
{ 
                Compiler.LogicNode node = ValueStack[ValueStack.Depth-2].node as  Compiler.LogicNode;
                if(node is null) 
                {
                    ++Compiler.errors;
                    Console.WriteLine("line: {0} syntax error",Compiler.lineno);
                }
                else
                {
                    node.right = ValueStack[ValueStack.Depth-1].node;
                    node.left = ValueStack[ValueStack.Depth-3].node;
                }
                CurrentSemanticValue.node = node;
            }
        break;
      case 52: // expr1 -> expr2
{CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;}
        break;
      case 53: // expr2 -> expr2, rel, expr3
{ 
                Compiler.RelationsNode node = ValueStack[ValueStack.Depth-2].node as Compiler.RelationsNode;
                if(node is null) 
                {
                    ++Compiler.errors;
                    Console.WriteLine("line: {0} syntax error",Compiler.lineno);
                }
                else
                {
                    node.right = ValueStack[ValueStack.Depth-1].node;
                    node.left = ValueStack[ValueStack.Depth-3].node;
                }
                CurrentSemanticValue.node = node;
            }
        break;
      case 54: // expr2 -> expr3
{CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;}
        break;
      case 55: // expr3 -> expr3, add, expr4
{ 
                Compiler.AdditiveNode node = ValueStack[ValueStack.Depth-2].node as Compiler.AdditiveNode;
                if(node is null) 
                {
                    ++Compiler.errors;
                    Console.WriteLine("line: {0} syntax error",Compiler.lineno);
                }
                else
                {
                    node.right = ValueStack[ValueStack.Depth-1].node;
                    node.left = ValueStack[ValueStack.Depth-3].node;
                }
                CurrentSemanticValue.node = node;
            }
        break;
      case 56: // expr3 -> expr4
{CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;}
        break;
      case 57: // expr4 -> expr4, mult, expr5
{ 
                Compiler.MultiplNode node = ValueStack[ValueStack.Depth-2].node as Compiler.MultiplNode;
                if(node is null) 
                {
                    ++Compiler.errors;
                    Console.WriteLine("line: {0} syntax error",Compiler.lineno);
                }
                else
                {
                    node.right = ValueStack[ValueStack.Depth-1].node;
                    node.left = ValueStack[ValueStack.Depth-3].node;
                }
                CurrentSemanticValue.node = node;
            }
        break;
      case 58: // expr4 -> expr5
{CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;}
        break;
      case 59: // expr5 -> expr5, bit, expr6
{ 
                Compiler.BitNode node = ValueStack[ValueStack.Depth-2].node as Compiler.BitNode;
                if(node is null) 
                {
                    ++Compiler.errors;
                    Console.WriteLine("line: {0} syntax error",Compiler.lineno);
                }
                else
                {
                    node.right = ValueStack[ValueStack.Depth-1].node;
                    node.left = ValueStack[ValueStack.Depth-3].node;
                }
                CurrentSemanticValue.node = node;
            }
        break;
      case 60: // expr5 -> expr6
{CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node;}
        break;
      case 61: // expr6 -> unary, expr6
{ 
               Compiler.UnaryNode node = ValueStack[ValueStack.Depth-2].node as Compiler.UnaryNode;
               if(node is null) 
                {
                    ++Compiler.errors;
                    Console.WriteLine("line: {0} syntax error",Compiler.lineno);
                }
                else
                {
                    node.right = ValueStack[ValueStack.Depth-1].node;
                }
                CurrentSemanticValue.node = node;
                CurrentSemanticValue.node.linenumber = Compiler.lineno;
            }
        break;
      case 62: // expr6 -> val
{CurrentSemanticValue.node = ValueStack[ValueStack.Depth-1].node; }
        break;
      case 63: // logic -> LogicAnd
{CurrentSemanticValue.node = new Compiler.LogicAndNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 64: // logic -> LogicOr
{CurrentSemanticValue.node = new Compiler.LogicOrNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 65: // rel -> Equal
{CurrentSemanticValue.node = new Compiler.EqualNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 66: // rel -> NotEqual
{CurrentSemanticValue.node = new Compiler.NotEqualNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 67: // rel -> Greater
{CurrentSemanticValue.node = new Compiler.GreaterNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 68: // rel -> GreaterEqual
{CurrentSemanticValue.node = new Compiler.GreaterEqualNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 69: // rel -> Smaller
{CurrentSemanticValue.node = new Compiler.SmallerNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 70: // rel -> SmallerEqual
{CurrentSemanticValue.node = new Compiler.SmallerEqualNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 71: // add -> Plus
{CurrentSemanticValue.node = new Compiler.PlusNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 72: // add -> Minus
{CurrentSemanticValue.node = new Compiler.MinusNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 73: // mult -> Multiplies
{CurrentSemanticValue.node = new Compiler.MultNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 74: // mult -> Divides
{CurrentSemanticValue.node = new Compiler.DivNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 75: // bit -> Or
{CurrentSemanticValue.node = new Compiler.OrNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 76: // bit -> And
{CurrentSemanticValue.node = new Compiler.AndNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 77: // unary -> LogicNot
{CurrentSemanticValue.node = new Compiler.LogicNotNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 78: // unary -> Not
{CurrentSemanticValue.node = new Compiler.NotNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 79: // unary -> Minus
{CurrentSemanticValue.node = new Compiler.UnaryMinusNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 80: // unary -> OpenPar, Int, ClosePar
{CurrentSemanticValue.node = new Compiler.IntCastNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 81: // unary -> OpenPar, Double, ClosePar
{CurrentSemanticValue.node = new Compiler.DoubleCastNode();  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 82: // val -> Ident
{CurrentSemanticValue.node = new Compiler.IdentNode(ValueStack[ValueStack.Depth-1].val);  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 83: // val -> IntNumber
{CurrentSemanticValue.node = new Compiler.IntNumberNode(ValueStack[ValueStack.Depth-1].val);  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 84: // val -> RealNumber
{CurrentSemanticValue.node = new Compiler.DoubleNumberNode(ValueStack[ValueStack.Depth-1].val);  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 85: // val -> Boolean
{CurrentSemanticValue.node = new Compiler.BooleanNode(ValueStack[ValueStack.Depth-1].val);  CurrentSemanticValue.node.linenumber = Compiler.lineno;}
        break;
      case 86: // val -> Ident, OpenIndex, expr, indexes, CloseIndex
{
                    ValueStack[ValueStack.Depth-2].index.Insert(0,ValueStack[ValueStack.Depth-3].node);
                    CurrentSemanticValue.node = new Compiler.TabIdentNode(ValueStack[ValueStack.Depth-5].val,ValueStack[ValueStack.Depth-2].index); 
                    CurrentSemanticValue.node.linenumber = Compiler.lineno;
                }
        break;
      case 87: // val -> OpenPar, expr, ClosePar
{CurrentSemanticValue.node = ValueStack[ValueStack.Depth-2].node;}
        break;
      case 88: // indexes -> Coma, expr, indexes
{
                CurrentSemanticValue.index = ValueStack[ValueStack.Depth-1].index;
                CurrentSemanticValue.index.Insert(0,ValueStack[ValueStack.Depth-2].node);
              }
        break;
      case 89: // indexes -> /* empty */
{CurrentSemanticValue.index = new List<Compiler.Node>();}
        break;
      case 91: // end -> Eof
{
               Console.WriteLine("  line {0,3}:  syntax error - unexpected symbol Eof",Compiler.lineno);
               ++Compiler.errors;
               YYAbort();
               }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


public enum Types{
    NoneType = 0,
    IntegerType = 1,
    DoubleType = 2,
    BooleanType = 3,
    StringType = 4
}

public Parser(Scanner scanner) : base(scanner) { }

}
}
